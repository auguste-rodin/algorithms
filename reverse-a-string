// challenge 1 "Reverse a string"
// Return a string in reverse

//using built-in objects

/*

function reverseString(str) {
  const strArray = str.split('');
  strArray.reverse();

  return strArray.join();
}

//cleaned up 
// no need for the const variable because you can use return to chain the methods instead.



function reverseString(str) {
  return str
  .split('')
  .reverse()
  .join();
}

*/

//while this version is fine, it's also the slowest in run-speed.

// now using a 'for' loop
/*
function reverseString(str) {

let revString = '';
  for (let i = str.length - 1; i >=0; i--) {
    revString = revString + str[i];
  }
  return revString;
}

console.log(reverseString("Hello"));
*/

// if you don't minus the string.length by 1 it returns undefined before hello. This is a decreasing array.

// you can also use an incrementing loop
/*

function reverseString(str) {

let revString = '';
  for (let i = 0; i <= str.length - 1; i++) {
    revString = str[i] + revString;
  }
  return revString;
}

console.log(reverseString("Hello"));
*/

// The loop now starts at 0 and runs until it reaches the string length minus 1 (or it will throw an undefined first). You also need to switch the string[i] and revString around.

// although acceptable the 'for' loops  don't take advantage of es6 and might be considered a little 'old school'. It's easy to make silly errors too. Very useful to understand nonetheless. 

// A 'For-Of loop works better in this case. 
/*
function reverseString(str) {
  let revString = '';
  for (let char of str) {
    revString = char + revString;
  }
  return revString;
}

console.log(reverseString("Hello"));
*/
// A clean and simple answer using 'char of'. It will be considered more correct than a 'for' loop

// You can also use high order arrays.
//In a forEach loop you first need to turn the string into an array.

/*
function reverseString(str) {
  let revString = '';
  str.split('').forEach(function(char) {
    revString = char + revString;
});
return revString;
}

console.log(reverseString("Hello")); */

// to show that you know es6 you can include the arrow function
// You use the => instead of function, then remove the curly braces and semicolon from the end of char + revString.

/*
function reverseString(str) {
  let revString = '';
  str.split('').forEach((char) => revString = char + revString);
return revString;
}

console.log(reverseString("Hello")); */

// You can also use the .reduce high order array method. With this method you don't even need to initialise the variable first. You simply return instead.

/*
function reverseString(str) {
  return str.split('').reduce(function(revString, char) {
    return char + revString;
  }, '');
}

console.log(reverseString("Hello")); */

// The function takes an empty string '' puts it into an array and returns the array in reverse. If you were to put the return char and revString the other way around it would log Hello.

// cleaned up with es6. Remove the function, the curly braces and the second return statement. 

/*
function reverseString(str) {
  return str.split('').reduce((revString, char) => char + revString, '');
}

console.log(reverseString("Hello")); */

// The last method is the fastest and likely most impressive answer. Actually the best answer is to be able to show each one and the reasoning behind each answer. 
